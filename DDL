create table Endereco (
    id serial primary key,
    logradouro varchar(50) not null,
    bairro varchar(50) not null,
    cidade varchar(50) not null,
    cep varchar(8) not null
);

create table Estabelecimento (
    id serial primary key,
    nome varchar(100) not null,
    id_endereco integer not null,
    razao_social varchar(100) not null,
    cnpj varchar(14) not null unique,
    inscricao_estadual varchar(15) not null unique,
    telefone varchar(11) not null,
    foreign key(id_endereco) references Endereco(id)
);

create table Funcionarios (
    id serial primary key,
    nome varchar(100) not null,
    cpf varchar(11) not null unique,
    data_nasc date not null,
    funcao varchar(25) not null,
    id_endereco integer not null,
    id_estabelecimento integer not null,
    foreign key(id_endereco) references Endereco(id),
    foreign key(id_estabelecimento) references Estabelecimento(id)
);

create table Categoria (
    id serial primary key,
    descricao varchar(250) not null unique
);

create table Produtos (
    id serial primary key,
    nome varchar(100) not null,
    preco double precision not null,
    qtde integer not null,
    uni_medida varchar(25) not null,
    cozido boolean not null,
    id_estabelecimento integer not null,
    id_categoria integer not null,
    foreign key(id_estabelecimento) references Estabelecimento(id),
    foreign key(id_categoria) references Categoria(id)
);

create table Comandas (
    id serial primary key,
    valor_total double precision,
    desconto double precision,
    mesa varchar(10),
    id_estabelecimento integer not null,
    data_hora_criacao timestamp not null,
    data_hora_finalizacao timestamp,
    valor_pago double precision,
    foreign key(id_estabelecimento) references Estabelecimento(id)
);

create table Pedidos (
    qntd integer not null,
    id_comandas integer not null,
    id_produtos integer not null,
    id serial primary key,
    data_hora_criacao timestamp not null,
    data_hora_finalizacao timestamp,
    data_hora_entrega timestamp,
    foreign key(id_comandas) references Comandas(id),
    foreign key(id_produtos) references Produtos(id)
);

create table log (
	identificador serial,
	tabela varchar (50),
	operacao varchar (10),
	dadosNovos text,
	dadosAntigos text
);

create sequence identificador_cont start with 1;
alter sequence identificador_cont owned by log.identificador;

create or replace function atualizapreco()
returns trigger
as $$
declare preco float; precoatual float; produto record;
begin
	raise notice  'id produto %', new.id_produtos;
	select p.preco from produtos p where p.id = new.id_produtos into preco;
	raise notice 'preco %', preco;
	select c.valor_total from comandas c where c.id = new.id_comandas into precoatual;
	if precoatual is null then
		precoatual = 0;
	end if;
	raise notice 'precoatual %', precoatual;
	preco:= preco * new.qntd + precoatual;

	raise notice 'preco %', preco;
	update comandas set valor_total = preco where id = new.id_comandas;

	return new;
end;
$$ language plpgsql;  

create trigger atualizacomanda
before insert or update on pedidos
for each row execute procedure atualizapreco();

create or replace function check_change() returns trigger as $$
declare dadosAntigos text; dadosNovos text;
   begin
       if (tg_op = 'UPDATE') then
       		dadosAntigos := ROW(old.*);
       		dadosNovos := row(new.*);
       		insert into log (tabela, operacao, dadosNovos, dadosAntigos) values ('comandas', 'update', dadosNovos, dadosAntigos);
       		return new;
       elsif (tg_op = 'INSERT') then
       		dadosNovos := row(new.*);
       		insert into log (tabela, operacao, dadosNovos, dadosAntigos) values ('comandas', 'insert', dadosNovos, 0);
       		return new;
	   elsif (tg_op = 'DELETE') then
			dadosAntigos := ROW(old.*);
	   		insert into log (tabela, operacao, dadosNovos, dadosAntigos) values ('comandas', 'delete', 0, dadosAntigos);
	   		return old;
	   end if;
   end;
$$ language plpgsql;

create trigger table_update_comandas
before update or delete or insert on comandas
for each row execute procedure check_change();

create index id_cat on categoria (id);

create index id_com on comandas (id);
create index id_estab on comandas (id_estabelecimento);
create index id_mesa on comandas (mesa);

create index id_end on endereco (id);

create index id_est on estabelecimento (id);
create index cnpj on estabelecimento (cnpj);
create index inscricao_estadual on estabelecimento (inscricao_estadual);

create index id_func on funcionarios (id);
create index cpf on funcionarios (cpf);
create index id_estb on funcionarios (id_estabelecimento);

create index id_log on log (identificador);

create index id_pedidos on pedidos (id);
create index id_comandas on pedidos (id_comandas);
create index id_produto on pedidos (id_produtos);

create index id_produtos on produtos (id);
create index id_categoria on produtos (id_categoria);
create index id_estabelecimento on produtos (id_estabelecimento);
